@page "/{username}"
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@using MiniTwit.Entities
@using MiniTwit.Models
@using MiniTwit.API.Controllers
@inject MiniTwitController controller
@inject NavigationManager NavManager

<h2>@username's Timeline</h2>
@{
    if (currentUser != null)
    {
        <div class=followstatus>
            @{
                if (username == currentUser.Username)
                {
                    <div>This is you!</div>
                }
                else if (isFollowing)
                {
                    <div>
                        <p>You are currently following this user.</p>
                        <a class=unfollow href="@username" @onclick="@UnfollowUser">Unfollow user</a>.
                    </div>
                }
                else
                {
                    <div>
                        <p>You are not yet following this user.</p>
                        <a class=follow href="@username" @onclick="@FollowUser">Follow user</a>.
                    </div>
                }
            }
        </div>
    }
}
<Timeline messages="@messages" />



@code {
    public IEnumerable<TimelineDTO> messages;

    [Parameter]
    public String username {get; set;}
    private User currentUser;
    private bool isFollowing;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            currentUser = await sessionStorage.GetItemAsync<User>("user");
            currentUser = currentUser == null || currentUser.UserId == 0 ? null : currentUser;
            messages = await controller.GetUserMessages(username);
            
            if (currentUser == null)
            {
                isFollowing = false;
            }
            else
            {
                isFollowing = await controller.IsFollowing(currentUser.Username, username);
            }
            
            StateHasChanged();
        }
    }

    private async void FollowUser()
    {
        await controller.FollowUser(new FollowDTO
                                        {
                                            follow = username
                                        }, currentUser.Username);
        NavManager.NavigateTo($"/{username}", forceLoad: true);
    }

    private async void UnfollowUser()
    {
        await controller.FollowUser(new FollowDTO
                                        {
                                            unfollow = username
                                        }, currentUser.Username);
        NavManager.NavigateTo($"/{username}", forceLoad: true);
    }
}